(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'auth_user'"
p3
sS'layer'
p4
S'/home/alfem/alfem/prog/telefam/server/web2py/applications/telefam/models/db.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n## File is released under public domain and you can use without limitations\n#########################################################################\n\n## if SSL/HTTPS is properly configured and you want all HTTP requests to\n## be redirected to HTTPS, uncomment the line below:\n# request.requires_https()\n\nif not request.env.web2py_runtime_gae:\n    ## if NOT running on Google App Engine use SQLite or other DB\n    db = DAL(\'sqlite:///home/alfem/alfem/prog/telefam/server/telefam.db\')\nelse:\n    ## connect to Google BigTable (optional \'google:datastore://namespace\')\n    db = DAL(\'google:datastore\')\n    ## store sessions and tickets there\n    session.connect(request, response, db = db)\n    ## or store session in Memcache, Redis, etc.\n    ## from gluon.contrib.memdb import MEMDB\n    ## from google.appengine.api.memcache import Client\n    ## session.connect(request, response, db = MEMDB(Client()))\n\n## by default give a view/generic.extension to all actions from localhost\n## none otherwise. a pattern can be \'controller/function.extension\'\n\n#response.generic_patterns = [\'*\'] if request.is_local else []\n\nresponse.generic_patterns = [\'*.json\'] \n\n\n## (optional) optimize handling of static files\n# response.optimize_css = \'concat,minify,inline\'\n# response.optimize_js = \'concat,minify,inline\'\n\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - old style crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import Auth, Crud, Service, PluginManager, prettydate\nauth = Auth(db, hmac_key=Auth.get_or_create_key())\nauth.settings.extra_fields[\'auth_user\']= [\n   Field(\'photo\',\'upload\',autodelete=True),\n  Field(\'updated_on\')]\ndb.auth_user.updated_on.readable = db.auth_user.updated_on.writable = False\n\ncrud, service, plugins = Crud(db), Service(), PluginManager()\n\n## create all tables needed by auth if not custom tables\nauth.define_tables()\n\n## configure email\nmail=auth.settings.mailer\nmail.settings.server = \'smtp.el-magnifico.org\'\nmail.settings.sender = \'alfonso@el-magnifico.org\'\nmail.settings.login = \'alfonso:alfemi\'\n\n## configure auth policy\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\n\n## if you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.\n## register with janrain.com, write your domain:api_key in private/janrain.key\n#from gluon.contrib.login_methods.rpx_account import use_janrain\n#use_janrain(auth,filename=\'private/janrain.key\')\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table(\'mytable\',Field(\'myfield\',\'string\'))\n##\n## Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n##       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n## There is an implicit \'id integer autoincrement\' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield=\'value\')\n## >>> rows=db(db.mytable.myfield==\'value\').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\ndb.define_table(\'telefams\',\n   Field(\'description\',length=80),\n   Field(\'user_id\', db.auth_user, default=auth.user_id),\n   Field(\'key\', length=32),\n   Field(\'last_connection\', \'datetime\'))\n   \ndb.telefams.description.requires = IS_NOT_EMPTY()\ndb.telefams.user_id.requires = IS_IN_DB(db, db.auth_user.id)\ndb.telefams.user_id.readable = db.telefams.user_id.writable = False\ndb.telefams.last_connection.writable = False\n\ndb.define_table(\'messages\',\n   Field(\'user_id\', db.auth_user, default=auth.user_id),\n   Field(\'telefam_id\', db.telefams, default=session.telefam_id),\n   Field(\'text\',\'text\',length=512),\n   Field(\'photo\',\'upload\',autodelete=True),\n   Field(\'sound\',\'upload\'),\n   Field(\'status\', default="New"),\n   Field(\'created_on\', \'datetime\', default=request.now),\n   Field(\'read_on\', \'datetime\'),\n   Field(\'updated_on\', \'datetime\', default=request.now)\n   )\n\ndb.messages.user_id.requires = IS_IN_DB(db, db.auth_user.id)\ndb.messages.user_id.readable = db.messages.user_id.writable = False\ndb.messages.telefam_id.requires = IS_IN_DB(db, db.telefams.id)\ndb.messages.telefam_id.readable = db.messages.telefam_id.writable = False\ndb.messages.text.requires = IS_NOT_EMPTY()\ndb.messages.status.readable = db.messages.status.writable = False\ndb.messages.status.requires= IS_IN_SET([\'New\', \'Sent\', \'Read\'])\ndb.messages.user_id.readable = False\ndb.messages.telefam_id.readable = False\ndb.messages.created_on.writable = False\ndb.messages.read_on.writable = False\ndb.messages.updated_on.readable = db.messages.updated_on.writable = False\n\ndb.define_table(\'galleries\',\n   Field(\'user_id\', db.auth_user, default=auth.user_id),\n   Field(\'telefam_id\', db.telefams, default=session.telefam_id),\n   Field(\'description\',length=80),\n   Field(\'service\', default="flickr"),\n   Field(\'url\',default="http://www.flickr.com/photos/..."),\n   Field(\'status\', default="New"),\n   Field(\'created_on\', \'datetime\', default=request.now),\n   Field(\'read_on\', \'datetime\'),\n   Field(\'updated_on\', \'datetime\', default=request.now)\n   )\n\ndb.galleries.user_id.requires = IS_IN_DB(db, db.auth_user.id)\ndb.galleries.user_id.readable = db.galleries.user_id.writable = False\ndb.galleries.telefam_id.requires = IS_IN_DB(db, db.telefams.id)\ndb.galleries.telefam_id.readable = db.galleries.telefam_id.writable = False\ndb.galleries.description.requires = IS_NOT_EMPTY()\ndb.galleries.service.requires= IS_IN_SET([\'Flickr\'])\ndb.galleries.status.readable = db.galleries.status.writable = False\ndb.galleries.status.requires= IS_IN_SET([\'New\', \'Sent\', \'Read\'])\ndb.galleries.user_id.readable = False\ndb.galleries.telefam_id.readable = False\ndb.galleries.created_on.writable = False\ndb.galleries.read_on.writable = False\ndb.galleries.updated_on.readable = db.galleries.updated_on.writable = False\n\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/alfem/alfem/prog/telefam/server/web2py/gluon/restricted.py", line 205, in restricted\n    exec ccode in environment\n  File "/home/alfem/alfem/prog/telefam/server/web2py/applications/telefam/models/db.py", line 52, in <module>\n    db.auth_user.updated_on.readable = db.auth_user.updated_on.writable = False\n  File "/home/alfem/alfem/prog/telefam/server/web2py/gluon/dal.py", line 6343, in __getattr__\n    return self[key]\n  File "/home/alfem/alfem/prog/telefam/server/web2py/gluon/dal.py", line 6337, in __getitem__\n    return dict.__getitem__(self, str(key))\nKeyError: \'auth_user\'\n'
p11
s.